import telebot
import requests
from bs4 import BeautifulSoup
from telebot import types
import time
import threading
import logging
import os
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7814951497:AAHM4Gg_PwhCjZQJ3aNltWjniCWfmCOJRPY")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PHOTOS_DIR = 'downloaded_photos'
os.makedirs(PHOTOS_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
active_thread = None

def get_currency_rate(currency):
    try:
        url = "https://www.cbr.ru/currency_base/daily/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        if currency == 'USD':
            rate_text = soup.find('td', text='–î–æ–ª–ª–∞—Ä –°–®–ê').find_next_sibling('td').text
            return float(rate_text.replace(',', '.'))
        elif currency == 'EUR':
            rate_text = soup.find('td', text='–ï–≤—Ä–æ').find_next_sibling('td').text
            return float(rate_text.replace(',', '.'))
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {currency}: {e}")
        return None

def check_rates_changes(chat_id):
    global active_thread
    while True:
        try:
            current_usd = get_currency_rate('USD')
            current_eur = get_currency_rate('EUR')
            
            try:
                if not os.path.exists('last_rates.txt'):
                    with open('last_rates.txt', 'w') as f:
                        if current_usd and current_eur:
                            f.write(f"{current_usd},{current_eur}")
                    continue
                
                with open('last_rates.txt', 'r+') as f:
                    data = f.read().split(',')
                    last_usd = float(data[0]) if data[0] else 0
                    last_eur = float(data[1]) if len(data) > 1 and data[1] else 0
                    
                    messages = []
                    if current_usd and current_usd != last_usd and last_usd != 0:
                        messages.append(f"üîî –ò–∑–º–µ–Ω–∏–ª—Å—è –∫—É—Ä—Å USD: {last_usd} ‚Üí {current_usd} —Ä—É–±.")
                    if current_eur and current_eur != last_eur and last_eur != 0:
                        messages.append(f"üîî –ò–∑–º–µ–Ω–∏–ª—Å—è –∫—É—Ä—Å EUR: {last_eur} ‚Üí {current_eur} —Ä—É–±.")
                    
                    if messages:
                        bot.send_message(chat_id, "\n".join(messages))
                    
                    if current_usd and current_eur:
                        f.seek(0)
                        f.write(f"{current_usd},{current_eur}")
                        f.truncate()
            
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –∫—É—Ä—Å–æ–≤: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_rates_changes: {e}")
        
        time.sleep(1800)  

@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    try:
        photo_info = message.photo[-1]
        file_id = photo_info.file_id
        file_info = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
        
        download_path = os.path.join(PHOTOS_DIR, f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file_id}.jpg")
        
        with open(download_path, 'wb') as new_file:
            new_file.write(requests.get(file_url).content)
        
        bot.reply_to(message, "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.id}: {download_path}")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}"
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ")
        logging.error(error_msg)

@bot.message_handler(content_types=['document'])
def handle_documents(message):
    if message.document.mime_type.startswith('image/'):
        try:
            file_info = bot.get_file(message.document.file_id)
            file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
            
            download_path = os.path.join(PHOTOS_DIR, f"doc_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{message.document.file_name}")
            
            with open(download_path, 'wb') as new_file:
                new_file.write(requests.get(file_url).content)
            
            bot.reply_to(message, "‚úÖ –§–æ—Ç–æ (–¥–æ–∫—É–º–µ–Ω—Ç) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {message.from_user.id}: {download_path}")
        
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
            logging.error(error_msg)

@bot.message_handler(commands=['start''help'])
def send_welcome(message):
    global active_thread
  
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_usd = types.KeyboardButton('USD')
    btn_eur = types.KeyboardButton('EUR')
    btn_all = types.KeyboardButton('–í—Å–µ –∫—É—Ä—Å—ã')
    btn_subscribe = types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    btn_photo = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
    markup.add(btn_usd, btn_eur, btn_all, btn_subscribe, btn_photo)
    
    text = "üè¶ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§ –∏ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ ."
    if message.text == '/help':
        text += "\n\n–ü–æ–º–æ—â—å: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"
    
    bot.send_message(message.chat.id, text, reply_markup=markup)
    
    if active_thread is None or not active_thread.is_alive():
        active_thread = threading.Thread(
            target=check_rates_changes,
            args=(message.chat.id,),
            daemon=True
        )
        active_thread.start()

@bot.message_handler(commands=['sendphoto'])
def request_photo(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == 'USD':
        rate = get_currency_rate('USD')
        if rate:
            bot.send_message(message.chat.id, f"üíµ –ö—É—Ä—Å USD: {rate} —Ä—É–±.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD")
    
    elif message.text == 'EUR':
        rate = get_currency_rate('EUR')
        if rate:
            bot.send_message(message.chat.id, f"üí∂ –ö—É—Ä—Å EUR: {rate} —Ä—É–±.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å EUR")
    
    elif message.text == '–í—Å–µ –∫—É—Ä—Å—ã':
        usd = get_currency_rate('USD')
        eur = get_currency_rate('EUR')
        if usd and eur:
            bot.send_message(
                message.chat.id,
                f"üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¶–ë –†–§:\n\n"
                f"üíµ –î–æ–ª–ª–∞—Ä –°–®–ê: {usd} —Ä—É–±.\n"
                f"üí∂ –ï–≤—Ä–æ: {eur} —Ä—É–±."
            )
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    
    elif message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è':
        bot.send_message(
            message.chat.id,
            "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤.\n"
            "–Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è."
        )
    
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        request_photo(message)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
