from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import random

TOKEN = "7814951497:AAHM4Gg_PwhCjZQJ3aNltWjniCWfmCOJRPY"

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ö–æ—Å—Ç—è —Ä–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–≥–æ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )
    show_main_keyboard(update, context)

def help_command(update: Update, context: CallbackContext) -> None:
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ö–æ—Å—Ç–µ–π
    /help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
    /menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    /game - –ò–≥—Ä–∞—Ç—å –≤ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' (1-100)
    /stop - –°–¥–∞—Ç—å—Å—è –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É
    
    –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!
    """
    update.message.reply_text(help_text)

def info(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–Ø –∫.—é —Ä–≤–∞–ª —Ç–≤–æ—é –∂–æ–ø—É –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç—ã.\n–ù–µ—Å—Ç–µ—Å–Ω—è–π—Å—è —è –Ω–µ—Ñ–æ—Ä.")

def start_game(update: Update, context: CallbackContext) -> None:
    secret_number = random.randint(1, 100)
    context.user_data['game_active'] = True
    context.user_data['secret_number'] = secret_number
    context.user_data['attempts'] = 0
    update.message.reply_text(
        "üéÆ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!\n"
        "–ï–±–∞—à —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!\n"
        "–ß—Ç–æ–±—ã —Å–¥–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /stop."
    )

def guess_number(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get('game_active'):
        return
        
    try:
        user_guess = int(update.message.text)
        secret_number = context.user_data['secret_number']
        context.user_data['attempts'] += 1

        if user_guess < 1 or user_guess > 100:
            update.message.reply_text("üö´ –ü—Ä–æ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100–º–º!")
        elif user_guess < secret_number:
            update.message.reply_text("‚¨ÜÔ∏è –ù–∏—Ö—É—è –Ω–µ –æ—Ç–≥–∞–¥–∞–ª –°–µ—Ä–µ–∂–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω!")
        elif user_guess > secret_number:
            update.message.reply_text("‚¨áÔ∏è –ù–∞—Ö—É–π —Å—Ç–æ–ª—å–∫–æ –º–∞–ª–æ!")
        else:
            attempts = context.user_data['attempts']
            update.message.reply_text(f"üéâ –ï–±–∞—Ç—å —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –£–≥–∞–¥–∞–ª –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫!")
            context.user_data.clear()
    except ValueError:
        update.message.reply_text("üî¢ –ï–±–∞—à —Ç–æ –º—ã —Å —Å–µ—Ä–µ–∂–æ–π –æ–±–∏–¥–µ–º—Å—è –æ—Ç 1 –¥–æ 100!")

def stop_game(update: Update, context: CallbackContext) -> None:
    if 'secret_number' in context.user_data:
        secret_number = context.user_data['secret_number']
        update.message.reply_text(
            f"üò• –ù–∏—Ö—É—è —Ç—ã —Ç–∏–ø–æ {secret_number}.\n"
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –º–µ–Ω—è –∑–∞–µ–±–∞—Ç—å –µ–±–∞—à /game."
        )
        context.user_data.clear()

def show_main_keyboard(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("–ö–Ω–æ–ø–∫–∞ 1"), KeyboardButton("–ö–Ω–æ–ø–∫–∞ 2")],
        [KeyboardButton("–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"), KeyboardButton("–ü–æ–º–æ—â—å")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def button_click(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('game_active'):
        return
        
    text = update.message.text
    if text == "–ö–Ω–æ–ø–∫–∞ 1":
        update.message.reply_text("–õ–µ—à–∞ —Ç—ã –ø—Ä–∏–Ω—è–ª –≠–ª–µ–∫—Ç—Ä–æ —Å–ø–±!")
    elif text == "–ö–Ω–æ–ø–∫–∞ 2":
        update.message.reply_text("–õ–µ—à–∞ –≥–¥–µ –ø—Ä–æ–≤–æ–¥–∞!")
    elif text == "–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏":
        show_inline_keyboard(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        help_command(update, context)

def show_inline_keyboard(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–û–ø—Ü–∏—è 1", callback_data='option1')],
        [InlineKeyboardButton("–û–ø—Ü–∏—è 2", callback_data='option2')],
        [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data='close')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

def inline_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if query.data == 'option1':
        query.edit_message_text(text="–ì–¥–µ –ø—Ä–æ–≤–æ–¥–∞")
    elif query.data == 'option2':
        query.edit_message_text(text="–Ø –Ω–∞ –º–æ—Ä–µ –∂–æ–ø—É –∑–∞–≥–æ—Ä–∞—é –¥–ª—è –í–∞–Ω–∏")
    elif query.data == 'close':
        query.edit_message_text(text="–ü–æ—à–ª–∏ –æ—Ç—Å—é–¥–∞")

def main() -> None:
    updater = Updater("7814951497:AAHM4Gg_PwhCjZQJ3aNltWjniCWfmCOJRPY")
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("info", info))
    dispatcher.add_handler(CommandHandler("menu", show_main_keyboard))
    dispatcher.add_handler(CommandHandler("game", start_game))
    dispatcher.add_handler(CommandHandler("stop", stop_game))

    # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—É, –ø–æ—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, guess_number))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, button_click))
    
    dispatcher.add_handler(CallbackQueryHandler(inline_button))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
