import telebot
import requests
from bs4 import BeautifulSoup
from telebot import types
import time
import threading
import logging
import os
import pytz
from datetime import datetime


bot = telebot.TeleBot(—Ç–æ–∫–µ–Ω –±–æ—Ç–∞")


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PHOTOS_DIR = 'downloaded_photos'
os.makedirs(PHOTOS_DIR, exist_ok=True)


active_thread = None
stop_thread = False


CURRENCY_DATA = {
    'USD': {
        'name': '–î–æ–ª–ª–∞—Ä –°–®–ê',
        'emoji': 'üíµ',
        'description': '–û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞',
        'flag': 'üá∫üá∏',
        'cbr_name': '–î–æ–ª–ª–∞—Ä –°–®–ê'
    },
    'EUR': {
        'name': '–ï–≤—Ä–æ',
        'emoji': 'üí∂',
        'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ –ï–≤—Ä–æ–∑–æ–Ω—ã',
        'flag': 'üá™üá∫',
        'cbr_name': '–ï–≤—Ä–æ'
    },
    'AED': {
        'name': '–î–∏—Ä—Ö–∞–º –û–ê–≠',
        'emoji': 'üá¶üá™',
        'description': '–í–∞–ª—é—Ç–∞ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ê—Ä–∞–±—Å–∫–∏—Ö –≠–º–∏—Ä–∞—Ç–æ–≤',
        'flag': 'üá¶üá™',
        'cbr_name': '–î–∏—Ä—Ö–∞–º –û–ê–≠'
    },
    'THB': {
        'name': '–¢–∞–π—Å–∫–∏–π –±–∞—Ç',
        'emoji': '‡∏ø',
        'description': '–í–∞–ª—é—Ç–∞ –¢–∞–∏–ª–∞–Ω–¥–∞',
        'flag': 'üáπüá≠',
        'cbr_name': '–¢–∞–π—Å–∫–∏–π –±–∞—Ç'
    },
    'CNY': {
        'name': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
        'emoji': '¬•',
        'description': '–í–∞–ª—é—Ç–∞ –ö–∏—Ç–∞—è',
        'flag': 'üá®üá≥',
        'cbr_name': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'
    },
    'JPY': {
        'name': '–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞',
        'emoji': 'ÂÜÜ',
        'description': '–í–∞–ª—é—Ç–∞ –Ø–ø–æ–Ω–∏–∏',
        'flag': 'üáØüáµ',
        'cbr_name': '–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞'
    },
    'KRW': {
        'name': '–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –í–æ–Ω–∞',
        'emoji': '‚Ç©',
        'flag': 'üá∞üá∑',
        'cbr_name': "–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –í–æ–Ω–∞"
    }
}

def get_currency_rate(currency):
    try:
        url = "https://www.cbr.ru/currency_base/daily/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        table = soup.find('table', {'class': 'data'})

        if not table:
            logger.error("–¢–∞–±–ª–∏—Ü–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        for row in table.find_all('tr'):
            cols = row.find_all('td')
            if len(cols) >= 5:
                code = cols[1].text.strip().split()[0]
                if code == currency:
                    nominal = float(cols[2].text.strip())
                    rate_text = cols[4].text.replace(',', '.')
                    direct_rate = float(rate_text) / nominal
                    reverse_rate = 1 / direct_rate
                    return direct_rate, reverse_rate

        logger.warning(f"–ö—É—Ä—Å –¥–ª—è {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {currency}: {e}")
        return None

def check_rates_changes(chat_id):
    global active_thread, stop_thread
    while not stop_thread:
        try:
            current_rates = {}
            for code in CURRENCY_DATA:
                rate = get_currency_rate(code)
                if rate and len(rate) == 2:
                    current_rates[code] = rate[0]  # Store only direct rate for comparison

            try:
                if not os.path.exists('last_rates.txt'):
                    with open('last_rates.txt', 'w') as f:
                        f.write(','.join(['0'] * len(CURRENCY_DATA)))
                    continue

                with open('last_rates.txt', 'r+') as f:
                    content = f.read().strip()
                    if not content:
                        last_rates = [0.0] * len(CURRENCY_DATA)
                    else:
                        try:
                            last_rates = list(map(float, content.split(',')))
                            if len(last_rates) != len(CURRENCY_DATA):
                                last_rates = [0.0] * len(CURRENCY_DATA)
                        except ValueError:
                            last_rates = [0.0] * len(CURRENCY_DATA)

                    messages = []
                    for i, (code, current) in enumerate(current_rates.items()):
                        last = last_rates[i]
                        if current and current != last and last != 0:
                            change = "‚Üë" if current > last else "‚Üì"
                            info = CURRENCY_DATA[code]
                            messages.append(
                                f"{info['emoji']} {info['name']}: {last:.4f} ‚Üí {current:.4f} —Ä—É–±. {change}"
                            )

                    if messages:
                        bot.send_message(chat_id, "\n".join(messages))

                    f.seek(0)
                    f.write(','.join(map(str, current_rates.values())))
                    f.truncate()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –∫—É—Ä—Å–æ–≤: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_rates_changes: {e}")

        time.sleep(1800)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    global active_thread, stop_thread

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for code in CURRENCY_DATA:
        btn = types.KeyboardButton(f"{CURRENCY_DATA[code]['emoji']} {code}")
        markup.add(btn)

    markup.add(
        types.KeyboardButton('üìä –í—Å–µ –∫—É—Ä—Å—ã'),
        types.KeyboardButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'),
        types.KeyboardButton('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    )

    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∞–ª—é—Ç–Ω—ã–π –ë–æ—Ç!* üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§.\n\n"
        "üí± *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–∞–ª—é—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, üíµ USD) —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
        "‚Ä¢ üìä –í—Å–µ –∫—É—Ä—Å—ã - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n"
        "‚Ä¢ üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è - –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "üîÑ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –¶–ë –†–§\n"
        "üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: " + datetime.now().strftime('%d.%m.%Y') + "\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='Markdown')

    stop_thread = False
    if active_thread is None or not active_thread.is_alive():
        active_thread = threading.Thread(
            target=check_rates_changes,
            args=(message.chat.id,),
            daemon=True
        )
        active_thread.start()

@bot.message_handler(commands=['time'])
def send_time(message):
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        time_str = current_time.strftime("%H:%M:%S")
        response = f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {time_str}"
        bot.reply_to(message, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_time: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "*/start* - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "*/help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "üíµ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:*\n" +
        "\n".join(
            f"{info['emoji']} {info['flag']} *{code}* - {info['name']}"
            for code, info in CURRENCY_DATA.items()
        ) +
        "\n\nüìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º
    for code in CURRENCY_DATA:
        if code in message.text or CURRENCY_DATA[code]['emoji'] in message.text:
            rate_data = get_currency_rate(code)
            if rate_data and len(rate_data) == 2:
                direct_rate, reverse_rate = rate_data
                info = CURRENCY_DATA[code]
                response = (
                    f"{info['emoji']} {info['flag']} *{info['name']} ({code})*\n"
                    f"üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¶–ë –†–§: *{direct_rate:.4f} —Ä—É–±.* –∑–∞ 1 {code}\n"
                    f"üîÅ –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å: *{reverse_rate:.6f} {code}* –∑–∞ 1 —Ä—É–±–ª—å\n"
                    f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                )
                bot.send_message(message.chat.id, response, parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {CURRENCY_DATA[code]['name']}")
            return

    
    if message.text in ('üìä –í—Å–µ –∫—É—Ä—Å—ã', '–í—Å–µ –∫—É—Ä—Å—ã'):
        rates = {}
        failed = False

        for code in CURRENCY_DATA:
            rate = get_currency_rate(code)
            if not rate or len(rate) != 2:
                failed = True
                break
            rates[code] = rate

        if not failed:
            response_lines = []
            for code, (direct, reverse) in rates.items():
                currency_info = CURRENCY_DATA.get(code, {})
                emoji = currency_info.get('emoji', '')
                flag = currency_info.get('flag', '')
                name = currency_info.get('name', code)

                response_lines.append(
                    f"{emoji} {flag} *{name} ({code}):*\n"
                    f"‚Ä¢ {direct:.4f} —Ä—É–±. –∑–∞ 1 {code}\n"
                    f"‚Ä¢ {reverse:.6f} {code} –∑–∞ 1 —Ä—É–±–ª—å"
                )

            response = (
                "üìà *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¶–ë –†–§:*\n\n" +
                "\n\n".join(response_lines) +
                f"\n\nüîÑ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            bot.send_message(message.chat.id, response, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif message.text in ('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'):
        global stop_thread
        stop_thread = False
        bot.send_message(message.chat.id, "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤")

    elif message.text in ('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'):
        stop_thread = True
        bot.send_message(message.chat.id, "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    elif message.text in ('‚ÑπÔ∏è –ü–æ–º–æ—â—å', '–ü–æ–º–æ—â—å'):
        send_help(message)

    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        stop_thread = True
        if active_thread and active_thread.is_alive():
            active_thread.join()
