import telebot
import requests
from bs4 import BeautifulSoup
from telebot import types
import time
import threading
import logging
import os
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7814951497:AAHM4Gg_PwhCjZQJ3aNltWjniCWfmCOJRPY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PHOTOS_DIR = 'downloaded_photos'
os.makedirs(PHOTOS_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_thread = None
stop_thread = False

# –î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö
CURRENCY_DATA = {
    'USD': {
        'name': '–î–æ–ª–ª–∞—Ä –°–®–ê',
        'emoji': 'üíµ',
        'description': '–û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞',
        'flag': 'üá∫üá∏',
        'cbr_name': '–î–æ–ª–ª–∞—Ä –°–®–ê'
    },
    'EUR': {
        'name': '–ï–≤—Ä–æ',
        'emoji': 'üí∂',
        'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ –ï–≤—Ä–æ–∑–æ–Ω—ã',
        'flag': 'üá™üá∫',
        'cbr_name': '–ï–≤—Ä–æ'
    },
    'AED': {
        'name': '–î–∏—Ä—Ö–∞–º –û–ê–≠',
        'emoji': 'üá¶üá™',
        'description': '–í–∞–ª—é—Ç–∞ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ê—Ä–∞–±—Å–∫–∏—Ö –≠–º–∏—Ä–∞—Ç–æ–≤',
        'flag': 'üá¶üá™',
        'cbr_name': '–î–∏—Ä—Ö–∞–º –û–ê–≠'
    }
}

def get_currency_rate(currency):
    try:
        url = "https://www.cbr.ru/currency_base/daily/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        table = soup.find('table', {'class': 'data'})
        
        if not table:
            logger.error("–¢–∞–±–ª–∏—Ü–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        for row in table.find_all('tr'):
            cols = row.find_all('td')
            if len(cols) >= 5:
                code = cols[1].text.strip().split()[0]
                if code == currency:
                    rate_text = cols[4].text.replace(',', '.')
                    return float(rate_text)
        
        logger.warning(f"–ö—É—Ä—Å –¥–ª—è {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {currency}: {e}")
        return None

def check_rates_changes(chat_id):
    global active_thread, stop_thread
    while not stop_thread:
        try:
            current_rates = {code: get_currency_rate(code) for code in CURRENCY_DATA}
            
            try:
                if not os.path.exists('last_rates.txt'):
                    with open('last_rates.txt', 'w') as f:
                        f.write(','.join(map(str, current_rates.values())))
                    continue
                
                with open('last_rates.txt', 'r+') as f:
                    last_rates = list(map(float, f.read().split(',')))
                    if len(last_rates) != len(CURRENCY_DATA):
                        last_rates = [0] * len(CURRENCY_DATA)
                    
                    messages = []
                    for i, (code, current) in enumerate(current_rates.items()):
                        last = last_rates[i]
                        if current and current != last and last != 0:
                            change = "‚Üë" if current > last else "‚Üì"
                            info = CURRENCY_DATA[code]
                            messages.append(
                                f"{info['emoji']} {info['name']}: {last:.2f} ‚Üí {current:.2f} —Ä—É–±. {change}"
                            )
                    
                    if messages:
                        bot.send_message(chat_id, "\n".join(messages))
                    
                    f.seek(0)
                    f.write(','.join(map(str, current_rates.values())))
                    f.truncate()
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –∫—É—Ä—Å–æ–≤: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_rates_changes: {e}")
        
        time.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

@bot.message_handler(commands=['start'])
def send_welcome(message):
    global active_thread, stop_thread
  
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for code in CURRENCY_DATA:
        btn = types.KeyboardButton(f"{CURRENCY_DATA[code]['emoji']} {code}")
        markup.add(btn)
    
    markup.add(
        types.KeyboardButton('üìä –í—Å–µ –∫—É—Ä—Å—ã'),
        types.KeyboardButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'),
        types.KeyboardButton('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è'),
        types.KeyboardButton('üì∑ –§–æ—Ç–æ'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    )
    
    welcome_text = (
        "üè¶ *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        f"{' | '.join(f'{CURRENCY_DATA[code]['emoji']} {code}' for code in CURRENCY_DATA)}"
    )
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='Markdown')
    
    stop_thread = False
    if active_thread is None or not active_thread.is_alive():
        active_thread = threading.Thread(
            target=check_rates_changes,
            args=(message.chat.id,),
            daemon=True
        )
        active_thread.start()

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "*/start* - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "*/help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "*/rates* - –í—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n\n"
        "üíµ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:*\n" +
        "\n".join(
            f"{info['emoji']} {info['flag']} *{code}* - {info['name']}" 
            for code, info in CURRENCY_DATA.items()
        ) +
        "\n\nüìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º
    for code in CURRENCY_DATA:
        if code in message.text or CURRENCY_DATA[code]['emoji'] in message.text:
            rate = get_currency_rate(code)
            if rate:
                info = CURRENCY_DATA[code]
                response = (
                    f"{info['emoji']} {info['flag']} *{info['name']} ({code})*\n"
                    f"üìä –ö—É—Ä—Å –¶–ë –†–§: *{rate:.2f} —Ä—É–±.*\n"
                    f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚ÑπÔ∏è {info['description']}"
                )
                bot.send_message(message.chat.id, response, parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {CURRENCY_DATA[code]['name']}")
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
    if message.text == 'üìä –í—Å–µ –∫—É—Ä—Å—ã' or message.text == '–í—Å–µ –∫—É—Ä—Å—ã':
        rates = {code: get_currency_rate(code) for code in CURRENCY_DATA}
        
        if all(rates.values()):
            response = "üìà *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¶–ë –†–§:*\n\n" + "\n".join(
                f"{CURRENCY_DATA[code]['emoji']} {CURRENCY_DATA[code]['flag']} "
                f"*{CURRENCY_DATA[code]['name']} ({code}):* {rate:.2f} —Ä—É–±."
                for code, rate in rates.items()
            )
            response += f"\n\nüîÑ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            bot.send_message(message.chat.id, response, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    
    elif message.text == 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' or message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
        global stop_thread
        stop_thread = False
        bot.send_message(message.chat.id, "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤")
    
    elif message.text == 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è' or message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
        stop_thread = True
        bot.send_message(message.chat.id, "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    elif message.text == 'üì∑ –§–æ—Ç–æ' or message.text == '–§–æ—Ç–æ':
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å' or message.text == '–ü–æ–º–æ—â—å':
        send_help(message)
    
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        stop_thread = True
        if active_thread and active_thread.is_alive():
            active_thread.join()
